version: "3.7"
services:
    minio-image:
        container_name: "minio-container"
        deploy:
            resources:
                limits:
                    cpus: '1'
                    memory: 512M
                reservations:
                    cpus: '0.5'
                    memory: 256M
        build:
            context: dockerfiles/minio
        restart: always
        working_dir: "/minio-image/storage"
        volumes:
            - ${wd}/minio/storage:/minio-image/storage
        ports:
            - "9000:9000"
        environment:
            MINIO_ACCESS_KEY: minio-image
            MINIO_SECRET_KEY: minio-image-pass1984
        command: server /minio-image/storage

    mlflow-image:
        container_name: "mlflow-container"
        build:
            context: dockerfiles/mlflow
        working_dir: "/mlflow-image"
        volumes:
            - ${wd}/mlflow:/mlflow-image
        environment:
            MLFLOW_S3_ENDPOINT_URL: http://minio-image:9000
            AWS_ACCESS_KEY_ID: minio-image
            AWS_SECRET_ACCESS_KEY: minio-image-pass1984
        ports:
            - "5000:5000"
        command: mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri /mlflow-image/mlruns

    jupyter-image:
        container_name: "jupyter-container"
        build:
            context: dockerfiles/jupyter
        volumes:
            - ${wd}/notebooks:/home/jovyan/work
            - ${wd}/aanomaly:/home/jovyan/work/aanomaly
            - ${wd}/mlflow:/mlflow-image
        environment:
            MLFLOW_S3_ENDPOINT_URL: http://minio-image:9000
            AWS_ACCESS_KEY_ID: minio-image
            AWS_SECRET_ACCESS_KEY: minio-image-pass    
            MLFLOW_TRACKING_URI: http://mlflow-image:5000        
        ports:    
            - "8889:8888"

    postgres-druid-image:
        image: postgres:12.4
        restart: always
        container_name: "postgres-druid-container"
        deploy:
            resources:
                limits:
                    cpus: '1'
                    memory: 1G
                reservations:
                    cpus: '1'
                    memory: 512M
        ports:
            - "5431:5431"
        environment:
            - POSTGRES_DB=druid
            - POSTGRES_USER=druid
            - POSTGRES_PASSWORD=druid
        volumes:
            - pg_data_druid:/var/lib/postgresql/data

    pgadmin-image:
        image: dpage/pgadmin4:4.16
        container_name: "pgadmin-container"
        environment:
            PGADMIN_DEFAULT_EMAIL: "guest"
            PGADMIN_DEFAULT_PASSWORD: "guest"
        volumes:
            - ${wd}/pgadmin/:/var/lib/pgadmin
        ports:
            - "1234:80"
        depends_on:
            - postgres-druid-image

    zookeeper-image:
        container_name: "zookeeper-container"
        image: zookeeper:3.5
        deploy:
            resources:
                limits:
                    cpus: '1'
                    memory: 512M
                reservations:
                    cpus: '1'
                    memory: 512M
        ports:
            - "2181:2181"
            - "2888:2888"
            - "3888:3888" 
        environment:
            - ZOO_MY_ID=1

    coordinator-image:
        image: apache/druid:0.20.0
        container_name: "coordinator-container"
        deploy:
            resources:
                limits:
                    cpus: '1'
                    memory: 512M
                reservations:
                    cpus: '1'
                    memory: 512M
        volumes:
            - ./storage:/opt/data
            - coordinator_var:/opt/druid/var
        depends_on:
            - zookeeper-image
            - postgres-druid-image
        ports:
            - "8081:8081"
        command:
            - coordinator
        env_file:
            - druid_environment

    broker-image:
        image: apache/druid:0.20.0
        container_name: "broker-container"
        deploy:
            resources:
                limits:
                    cpus: '2'
                    memory: 2G
                reservations:
                    cpus: '2'
                    memory: 1G
        volumes:
            - broker_var:/opt/druid/var
        depends_on:
            - zookeeper-image
            - postgres-druid-image
            - coordinator-image
        ports:
            - "8082:8082"
        command:
            - broker
        env_file:
            - druid_environment

    historical-image:
        image: apache/druid:0.20.0
        container_name: "historical-container"
        deploy:
            resources:
                limits:
                    cpus: '2'
                    memory: 2G
                reservations:
                    cpus: '2'
                    memory: 1G
        volumes:
            - ./storage:/opt/data
            - historical_var:/opt/druid/var
        depends_on:
            - zookeeper-image
            - postgres-druid-image
            - coordinator-image
        ports:
            - "8083:8083"
        command:
            - historical
        env_file:
            - druid_environment

    middlemanager-image:
        image: apache/druid:0.20.0
        container_name: "middlemanager-container"
        deploy:
            resources:
                limits:
                    cpus: '2'
                    memory: 1G
                reservations:
                    cpus: '2'
                    memory: 256M
        volumes:
            - ./storage:/opt/data
            - middle_var:/opt/druid/var
        depends_on:
            - zookeeper-image
            - postgres-druid-image
            - coordinator-image
        ports:
            - "8091:8091"
        command:
            - middleManager
        env_file:
            - druid_environment

    router-image:
        image: apache/druid:0.20.0
        container_name: "router-container"
        deploy:
            resources:
                limits:
                    cpus: '1'
                    memory: 256M
                reservations:
                    cpus: '1'
                    memory: 256M
        volumes:
            - router_var:/opt/druid/var
        depends_on:
            - zookeeper-image
            - postgres-druid-image
            - coordinator-image
        ports:
            - "8888:8888"
        command:
            - router
        env_file:
            - druid_environment

volumes:
    pg_data_druid:
        external: false
        name: pg_data_druid
    middle_var: {}
    historical_var: {}
    broker_var: {}
    coordinator_var: {}
    router_var: {}